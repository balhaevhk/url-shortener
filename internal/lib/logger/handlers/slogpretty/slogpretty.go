package slogpretty

import (
	// context - стандартный пакет Go для работы с контекстами, который используется для передачи информации
	// о сроках выполнения и отменах между горутинами. Например, можно использовать контексты для отмены долгих операций.
	"context"
	
	// encoding/json - стандартный пакет для кодирования и декодирования данных в формат JSON.
	// Он предоставляет функции для преобразования данных Go-структур в JSON и наоборот.
	"encoding/json"
	
	// io - стандартный пакет для работы с потоками ввода/вывода.
	// Используется для работы с данными, которые могут поступать из различных источников (например, файлы или сеть).
	"io"

// stdLog "log" - это стандартный пакет для логирования в Go, который используется для простого логирования сообщений.
// Мы импортируем его с псевдонимом "stdLog", чтобы избежать конфликтов с другим логированием, например, с использованием "log/slog".
// Этот пакет предоставляет базовые функции для записи логов в стандартный вывод или в файл, такие как:
// - stdLog.Println() - для записи строки с переходом на новую строку.
// - stdLog.Print() - для записи строки без перехода на новую строку.
// - stdLog.Fatal() - для записи сообщения об ошибке и завершения программы.
// Он часто используется для быстрого и простого логирования, но не поддерживает сложные структуры или уровни логирования.
stdLog "log"

	// log/slog - стандартный пакет для логирования в Go.
	// Позволяет создавать структурированные логи с различными уровнями логирования, такими как info, debug и error.
	"log/slog"
	
	// github.com/fatih/color - сторонний пакет для добавления цветного вывода в консоль.
	// Он позволяет легко выделять текст в консоли, что может быть полезно для ошибок или важной информации.
	"github.com/fatih/color"
)


// PrettyHandlerOptions - структура, которая содержит настройки для создания красивого (pretty) логгера с использованием slog.
// В поле SlogOpts передаются параметры для настройки обработчика логов, такие как уровень логирования и другие параметры,
// которые определяют, как будет вести себя логгер (например, формат вывода).
type PrettyHandlerOptions struct {
	// SlogOpts - это указатель на объект с параметрами для конфигурации обработчика логов (slog.HandlerOptions).
	// Он позволяет настраивать такие параметры, как уровень логирования (например, debug, info, error) и формат вывода логов.
	SlogOpts *slog.HandlerOptions
}


// PrettyHandler - структура, представляющая обработчик логов с красивым (pretty) выводом.
// Она используется для логирования сообщений в читаемом формате в консоли, добавляя дополнительные атрибуты и информацию.
// В этой структуре:
type PrettyHandler struct {
	// opts - настройки для конфигурации логирования, включающие параметры для обработчика.
	// В них может быть задан уровень логирования и другие параметры форматирования вывода.
	// opts PrettyHandlerOptions
	
	// Handler - это встроенное поле, которое представляет стандартный обработчик логов из пакета slog.
	// Оно предоставляет функции для записи логов и их обработки.
	slog.Handler
	
	// l - логгер из стандартного пакета log, который будет использоваться для записи логов.
	// Это позволяет использовать простой вывод логов для работы с текстовыми сообщениями.
	l *stdLog.Logger
	
	// attrs - список атрибутов (slog.Attr), которые добавляются к каждому лог-сообщению.
	// Это могут быть дополнительные данные, такие как метки или уникальные идентификаторы для трассировки запросов.
	attrs []slog.Attr
}


// NewPrettyHandler - метод, который создает новый экземпляр PrettyHandler с заданными параметрами.
// Он инициализирует обработчик логирования с "красивым" (pretty) выводом, используя указанный Writer для вывода логов.
// В этом методе:
func (opts PrettyHandlerOptions) NewPrettyHandler(
	out io.Writer, // out - это выходной поток для записи логов. Обычно это стандартный вывод или файл.
) *PrettyHandler {
	// Создаем новый объект PrettyHandler с использованием настроек из PrettyHandlerOptions (opts).
	// Для обработки логов используется JSON-формат (slog.NewJSONHandler) с заданными настройками.
	h := &PrettyHandler{
		Handler: slog.NewJSONHandler(out, opts.SlogOpts), // Новый обработчик JSON-логов с параметрами из SlogOpts.
		l:       stdLog.New(out, "", 0),                    // Логгер для простого текстового вывода.
	}
	// Возвращаем созданный обработчик.
	return h
}

// Handle - метод, который обрабатывает запись логов (slog.Record) и форматирует вывод для красивого отображения в консоли.
// Этот метод используется для того, чтобы лог-сообщения выводились с цветовой кодировкой в зависимости от уровня важности.
// В этом методе:
func (h *PrettyHandler) Handle(_ context.Context, r slog.Record) error {
	// Формируем строку для уровня логирования с добавлением двоеточия.
	level := r.Level.String() + ":"

	// В зависимости от уровня логирования (debug, info, warn, error), меняем цвет текста для отображения.
	// Для этого используем библиотеку color, чтобы выделить уровень лога разными цветами.
	switch r.Level {
	case slog.LevelDebug:
		level = color.MagentaString(level) // Уровень debug будет отображаться магентой.
	case slog.LevelInfo:
		level = color.BlueString(level) // Уровень info будет отображаться синим.
	case slog.LevelWarn:
		level = color.YellowString(level) // Уровень warn будет отображаться желтым.
	case slog.LevelError:
		level = color.RedString(level) // Уровень error будет отображаться красным.
	}

	// Создаем пустую карту для хранения атрибутов лога.
	// Мы будем записывать ключи и значения каждого атрибута лога.
	fields := make(map[string]interface{}, r.NumAttrs())

	// Обрабатываем атрибуты из записи лога (slog.Record) и сохраняем их в карту.
	// Каждый атрибут (ключ-значение) добавляется в поле "fields".
	r.Attrs(func(a slog.Attr) bool {
		fields[a.Key] = a.Value.Any() // Сохраняем атрибут в карту.
		return true
	})

	// Добавляем дополнительные атрибуты, определенные в h.attrs.
	// Это позволяет добавлять дополнительные данные ко всем лог-сообщениям, например, метки или идентификаторы.
	for _, a := range h.attrs {
		fields[a.Key] = a.Value.Any()
	}

	// Массив для хранения JSON-строки с аттрибутами.
	var b []byte
	var err error

	// Если атрибуты есть, сериализуем их в JSON с отступами для красивого форматирования.
	if len(fields) > 0 {
		b, err = json.MarshalIndent(fields, "", "  ")
		if err != nil {
			return err // Если произошла ошибка при маршализации, возвращаем ошибку.
		}
	}

	// Форматируем время для вывода в лог.
	// Используем стандартный формат времени, чтобы оно выводилось в виде "[15:05:05.000]".
	timeStr := r.Time.Format("[15:05:05.000]")

	// Форматируем сообщение лога, выделяя его синим цветом для лучшей читаемости.
	msg := color.CyanString(r.Message)

	// Печатаем финальное сообщение в лог с указанными параметрами:
	// Время, уровень логирования, сообщение и атрибуты в JSON-формате (с белым цветом).
	h.l.Println(
		timeStr, // Время лог-сообщения.
		level,   // Уровень логирования (с цветом).
		msg,     // Сообщение (с цветом).
		color.WhiteString(string(b)), // Атрибуты в JSON-формате.
	)

	// Возвращаем nil, так как обработка завершена успешно.
	return nil
}

// WithAttrs - метод, который позволяет добавить дополнительные атрибуты к обработчику логов.
// Он возвращает новый экземпляр PrettyHandler с обновленным списком атрибутов, которые будут добавлены ко всем лог-сообщениям.
// В этом методе:
func (h *PrettyHandler) WithAttrs(attrs []slog.Attr) slog.Handler {
	// Создаем новый экземпляр PrettyHandler с обновленными аттрибутами.
	// В остальном, обработчик остается тем же, что был (передаем Handler и Logger как есть).
	return &PrettyHandler{
		Handler: h.Handler, // Используем текущий обработчик логов.
		l:       h.l,       // Логгер остается прежним.
		attrs:   attrs,     // Новые атрибуты, которые будут добавлены ко всем лог-сообщениям.
	}
}


// WithGroup - метод, который позволяет добавить группу к обработчику логов.
// Группы логов могут быть полезны для организации лог-сообщений в рамках определенных категорий или контекста.
// Этот метод возвращает новый экземпляр PrettyHandler с добавленной группой, которая будет применяться ко всем лог-сообщениям.
// В этом методе:
func (h *PrettyHandler) WithGroup(name string) slog.Handler {
	// TODO: implement - Здесь можно реализовать добавление группы для логов, чтобы лог-сообщения были отсортированы по категориям.
	// На данный момент возвращаем новый экземпляр PrettyHandler с обновленным группировочным параметром.
	return &PrettyHandler{
		Handler: h.Handler.WithGroup(name), // Добавляем группу к текущему обработчику логов.
		l:       h.l,                       // Логгер остается прежним.
	}
}
